package message

import (
	"context"
	"go_grpc_realtime/lib/core/grpcgen"
	"go_grpc_realtime/lib/core/jwtmanager"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type MessageController struct {
	grpcgen.UnimplementedMessageServiceServer
	*repository
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func InitAndGetMessageServices() grpcgen.MessageServiceServer {
	repo := &repository{}

	repo.migrateDb()

	return &MessageController{
		repository: repo,
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (ctr *MessageController) CreateMessageRoom(ctx context.Context, req *grpcgen.CreateMessageRoomRequest) (*grpcgen.MessageRoom, error) {
	userId, ok := ctx.Value(jwtmanager.USER_ID_KEY).(uint)
	if !ok {
		return nil, status.Errorf(
			codes.NotFound,
			"user not found",
		)
	}

	return ctr.createMessageRoom(req, userId)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (ctr *MessageController) GetMessageRooms(ctx context.Context, req *grpcgen.GetMessageRoomsRequest) (*grpcgen.GetMessageRoomsResponse, error) {
	userId, ok := ctx.Value(jwtmanager.USER_ID_KEY).(uint)
	if !ok {
		return nil, status.Errorf(
			codes.NotFound,
			"user not found",
		)
	}

	return ctr.getMessageRooms(req, userId)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (ctr *MessageController) GetMessageRoomDetails(ctx context.Context, req *grpcgen.GetMessageRoomDetailsRequest) (*grpcgen.MessageRoom, error) {
	userId, ok := ctx.Value(jwtmanager.USER_ID_KEY).(uint)
	if !ok {
		return nil, status.Errorf(
			codes.NotFound,
			"user not found",
		)
	}

	return ctr.getMessageRoomDetails(req, userId)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (ctr *MessageController) SendMessage(ctx context.Context, req *grpcgen.SendMessageRequest) (*grpcgen.Message, error) {
	userId, ok := ctx.Value(jwtmanager.USER_ID_KEY).(uint)
	if !ok {
		return nil, status.Errorf(
			codes.NotFound,
			"user not found",
		)
	}

	return ctr.sendMessage(req, userId)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (ctr *MessageController) GetMessages(ctx context.Context, req *grpcgen.GetMessagesRequest) (*grpcgen.GetMessagesResponse, error) {
	userId, ok := ctx.Value(jwtmanager.USER_ID_KEY).(uint)
	if !ok {
		return nil, status.Errorf(
			codes.NotFound,
			"user not found",
		)
	}

	return ctr.getMessages(req, userId)
}
